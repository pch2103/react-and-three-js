{"version":3,"sources":["component-3d/addLights.js","component-3d/addDatGui.js","component-3d/Init.js","component-3d/addCone.js","App.js","reportWebVitals.js","index.js"],"names":["addLights","scene","frontSpot","THREE","position","set","add","frontSpot2","addDatGui","obj3d","gui","dat","min","max","step","objParameters","rotationX","rotationY","rotationZ","onWindowResize","camera","renderer","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","Init","useEffect","width","height","setClearColor","document","body","appendChild","domElement","z","mesh","radius","sides","geometry","material","color","specular","addCone","controls","OrbitControls","addEventListener","bind","animate","requestAnimationFrame","update","rotation","x","y","render","console","log","removeEventListener","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"gPAEA,IASeA,EATG,SAACC,GAClB,IAAMC,EAAY,IAAIC,IAAgB,UACtCD,EAAUE,SAASC,IAAI,IAAM,IAAM,KACnCJ,EAAMK,IAAIJ,GACV,IAAMK,EAAa,IAAIJ,IAAgB,UACvCI,EAAWH,SAASC,KAAK,KAAM,KAAM,KACrCJ,EAAMK,IAAIC,I,OCCIC,EAPG,SAACC,GAClB,IAAMC,EAAM,IAAIC,IAChBD,EAAIJ,IAAIG,EAAO,aAAaG,KAAK,KAAMC,IAAI,KAAMC,KAAK,MACtDJ,EAAIJ,IAAIG,EAAO,aAAaG,KAAK,KAAMC,IAAI,KAAMC,KAAK,MACtDJ,EAAIJ,IAAIG,EAAO,aAAaG,KAAK,KAAMC,IAAI,KAAMC,KAAK,O,OCCjDC,EAAgB,CACrBC,UAAW,EACXC,UAAW,EACXC,UAAW,GAGZ,SAASC,EAAeC,EAAQC,GAE/BD,EAAOE,OAASC,OAAOC,WAAaD,OAAOE,YAC3CL,EAAOM,yBAEPL,EAASM,QAAQJ,OAAOC,WAAYD,OAAOE,aAoD7BG,MAjDf,WAAkB,IAAD,OA8ChB,OA7CAC,qBAAU,WACT,IAAMC,EAAQP,OAAOC,WACfO,EAASR,OAAOE,YAEhBJ,EAAW,IAAIlB,IACrBkB,EAASW,cAAc,GACvBX,EAASM,QAAQG,EAAOC,GAExBE,SAASC,KAAKC,YAAYd,EAASe,YAEnC,IAAMnC,EAAQ,IAAIE,IACZiB,EAAS,IAAIjB,IAAwB,GAAI2B,EAAQC,EAAQ,GAAK,KACpEX,EAAOhB,SAASiC,EAAI,IAEpBrC,EAAUC,GAEV,IAAMqC,ECpCO,SAAiBC,EAAOR,GAAkB,IAAXS,EAAU,uDAAJ,GAC7CC,EAAW,IAAItC,IAAmBoC,EAAQR,EAAQS,GAClDE,EAAW,IAAIvC,IAAwB,CAC5CwC,MAAO,OACPC,SAAU,WAEX,OAAO,IAAIzC,IAAWsC,EAAUC,GD8BlBG,CAAQ,IAAK,IAAI,IAC9B5C,EAAMK,IAAIgC,GAEV9B,EAAUO,GAEV,IAAM+B,EAAW,IAAIC,IAAc3B,EAAQC,EAASe,YAGpDb,OAAOyB,iBAAiB,SACtB7B,EAAe8B,KAAK,EAAM7B,EAAQC,IAClC,GAcF,OAZgB,SAAV6B,IACLC,sBAAuBD,GACvBJ,EAASM,SACTd,EAAKe,SAASC,GAAKvC,EAAcC,UACjCsB,EAAKe,SAASE,GAAKxC,EAAcE,UACjCqB,EAAKe,SAAShB,GAAKtB,EAAcG,UACjCG,EAASmC,OAAQvD,EAAOmB,GAEzB8B,GAEAO,QAAQC,IAAI,WAEL,WACNnC,OAAOoC,oBAAoB,SAAUxC,EAAe8B,KAAK,EAAM7B,EAAQC,IAAW,GAClFoC,QAAQC,IAAI,gBAEX,IACI,8BEtDOE,MATf,WAEC,OACE,qBAAKC,UAAU,MAAf,SACC,cAAC,EAAD,OCIWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASf,OACP,cAAC,IAAMgB,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAG1BX,M","file":"static/js/main.2867e42b.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nconst addLights = (scene) => {\n\tconst frontSpot = new THREE.SpotLight(0xeeeece);\n\tfrontSpot.position.set(1000, 1000, 1000);\n\tscene.add(frontSpot);\n\tconst frontSpot2 = new THREE.SpotLight(0xddddce);\n\tfrontSpot2.position.set(-300, -300, -300);\n\tscene.add(frontSpot2);\n}\n\nexport default addLights;","import * as dat from 'dat.gui';\n\nconst addDatGui = (obj3d) => {\n\tconst gui = new dat.GUI();\n\tgui.add(obj3d, 'rotationX').min(-0.03).max(0.03).step(0.001);\n\tgui.add(obj3d, 'rotationY').min(-0.03).max(0.03).step(0.001);\n\tgui.add(obj3d, 'rotationZ').min(-0.03).max(0.03).step(0.001);\n}\n\nexport default addDatGui;","import React, {useEffect} from 'react';\nimport * as THREE from \"three\";\nimport addCone from \"./addCone\";\nimport addLights from \"./addLights\";\nimport addDatGui from \"./addDatGui\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nconst objParameters = {\n\trotationX: 0,\n\trotationY: 0,\n\trotationZ: 0\n};\n\nfunction onWindowResize(camera, renderer) {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nfunction Init () {\n\tuseEffect(() => {\n\t\tconst width = window.innerWidth;\n\t\tconst height = window.innerHeight;\n\n\t\tconst renderer = new THREE.WebGLRenderer();\n\t\trenderer.setClearColor(0x000000);\n\t\trenderer.setSize(width, height);\n\n\t\tdocument.body.appendChild(renderer.domElement);\n\n\t\tconst scene = new THREE.Scene();\n\t\tconst camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 5000);\n\t\tcamera.position.z = 1000;\n\n\t\taddLights(scene);\n\n\t\tconst mesh = addCone(100, 300,32);\n\t\tscene.add(mesh);\n\n\t\taddDatGui(objParameters);\n\n\t\tconst controls = new OrbitControls(camera, renderer.domElement);\n\t\t// controls.maxPolarAngle=Math.PI/2\n\n\t\twindow.addEventListener('resize',\n\t\t\t\tonWindowResize.bind(this, camera, renderer),\n\t\t\t\tfalse)\n\n\t\tconst animate = () => {\n\t\t\trequestAnimationFrame( animate );\n\t\t\tcontrols.update();\n\t\t\tmesh.rotation.x += objParameters.rotationX;\n\t\t\tmesh.rotation.y += objParameters.rotationY;\n\t\t\tmesh.rotation.z += objParameters.rotationZ;\n\t\t\trenderer.render( scene, camera );\n\t\t};\n\t\tanimate();\n\n\t\tconsole.log('mounted')\n\n\t\treturn () => { //componentWillUnmount\n\t\t\twindow.removeEventListener('resize', onWindowResize.bind(this, camera, renderer), false)\n\t\t\tconsole.log('unmounted')\n\t\t}\n\t}, []);\n\treturn <></>\n}\n\nexport default Init;","import * as THREE from \"three\";\n\nexport default function addCone(radius,height,sides=12) {\n\tconst geometry = new THREE.ConeGeometry(radius, height, sides);\n\tconst material = new THREE.MeshPhongMaterial({\n\t\tcolor: 0x039BE5,\n\t\tspecular: 0xbcbcbc,\n\t});\n\treturn new THREE.Mesh(geometry, material);\n}","import React from 'react';\nimport './App.css';\nimport Init from \"./component-3d/Init\";\n\nfunction App() {\n\n\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Init/>\n\t\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}