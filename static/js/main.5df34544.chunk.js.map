{"version":3,"sources":["component-3d/addLights.js","component-3d/addDatGui.js","component-3d/Init.js","component-3d/addCone.js","App.js","reportWebVitals.js","index.js"],"names":["addLights","scene","frontSpot","THREE","position","set","add","frontSpot2","addDatGui","obj3d","gui","dat","min","max","step","objParameters","rotationX","rotationY","rotationZ","onWindowResize","camera","renderer","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","Init","mountRef","useRef","useEffect","current","width","height","setClearColor","domElement","appendChild","z","mesh","radius","sides","geometry","material","color","specular","addCone","controls","OrbitControls","addEventListener","bind","animate","requestAnimationFrame","update","rotation","x","y","render","console","log","removeEventListener","removeChild","ref","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"gPAEA,IASeA,EATG,SAACC,GAClB,IAAMC,EAAY,IAAIC,IAAgB,UACtCD,EAAUE,SAASC,IAAI,IAAM,IAAM,KACnCJ,EAAMK,IAAIJ,GACV,IAAMK,EAAa,IAAIJ,IAAgB,UACvCI,EAAWH,SAASC,KAAK,KAAM,KAAM,KACrCJ,EAAMK,IAAIC,I,OCCIC,EAPG,SAACC,GAClB,IAAMC,EAAM,IAAIC,IAChBD,EAAIJ,IAAIG,EAAO,aAAaG,KAAK,KAAMC,IAAI,KAAMC,KAAK,MACtDJ,EAAIJ,IAAIG,EAAO,aAAaG,KAAK,KAAMC,IAAI,KAAMC,KAAK,MACtDJ,EAAIJ,IAAIG,EAAO,aAAaG,KAAK,KAAMC,IAAI,KAAMC,KAAK,O,OCCjDC,EAAgB,CACrBC,UAAW,EACXC,UAAW,EACXC,UAAW,GAGZ,SAASC,EAAeC,EAAQC,GAC/BD,EAAOE,OAASC,OAAOC,WAAaD,OAAOE,YAC3CL,EAAOM,yBACPL,EAASM,QAAQJ,OAAOC,WAAYD,OAAOE,aAgE7BG,MA7Df,WAAkB,IAAD,OACVC,EAAWC,iBAAO,MAyDxB,OAvDAC,qBAAU,WAAO,IACRC,EAAYH,EAAZG,QAER,GAAKA,EAAL,CAIA,IAAMC,EAAQV,OAAOC,WACfU,EAASX,OAAOE,YAEhBJ,EAAW,IAAIlB,IACrBkB,EAASc,cAAc,GACvBd,EAASM,QAAQM,EAAOC,GAZT,IAgBPE,EAAef,EAAfe,WACRJ,EAAQK,YAAYD,GAEpB,IAAMnC,EAAQ,IAAIE,IACZiB,EAAS,IAAIjB,IAAwB,GAAI8B,EAAQC,EAAQ,GAAK,KACpEd,EAAOhB,SAASkC,EAAI,IAEpBtC,EAAUC,GAEV,IAAMsC,EC7CO,SAAiBC,EAAON,GAAkB,IAAXO,EAAU,uDAAJ,GAC7CC,EAAW,IAAIvC,IAAmBqC,EAAQN,EAAQO,GAClDE,EAAW,IAAIxC,IAAwB,CAC5CyC,MAAO,OACPC,SAAU,WAEX,OAAO,IAAI1C,IAAWuC,EAAUC,GDuClBG,CAAQ,IAAK,IAAI,IAC9B7C,EAAMK,IAAIiC,GAEV/B,EAAUO,GAEV,IAAMgC,EAAW,IAAIC,IAAc5B,EAAQC,EAASe,YAGpDb,OAAO0B,iBAAiB,SACtB9B,EAAe+B,KAAK,EAAM9B,EAAQC,IAClC,GAcF,OAZgB,SAAV8B,IACLC,sBAAuBD,GACvBJ,EAASM,SACTd,EAAKe,SAASC,GAAKxC,EAAcC,UACjCuB,EAAKe,SAASE,GAAKzC,EAAcE,UACjCsB,EAAKe,SAAShB,GAAKvB,EAAcG,UACjCG,EAASoC,OAAQxD,EAAOmB,GAEzB+B,GAEAO,QAAQC,IAAI,WAEL,WACNpC,OAAOqC,oBAAoB,SAAUzC,EAAe+B,KAAK,EAAM9B,EAAQC,IAAW,GAClFW,EAAQ6B,YAAYzB,GACpBsB,QAAQC,IAAI,iBAEX,IACI,qBAAKG,IAAKjC,KEhEHkC,MATf,WAEC,OACE,qBAAKC,UAAU,MAAf,SACC,cAAC,EAAD,OCIWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASjB,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.5df34544.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nconst addLights = (scene) => {\n\tconst frontSpot = new THREE.SpotLight(0xeeeece);\n\tfrontSpot.position.set(1000, 1000, 1000);\n\tscene.add(frontSpot);\n\tconst frontSpot2 = new THREE.SpotLight(0xddddce);\n\tfrontSpot2.position.set(-300, -300, -300);\n\tscene.add(frontSpot2);\n}\n\nexport default addLights;","import * as dat from 'dat.gui';\n\nconst addDatGui = (obj3d) => {\n\tconst gui = new dat.GUI();\n\tgui.add(obj3d, 'rotationX').min(-0.03).max(0.03).step(0.001);\n\tgui.add(obj3d, 'rotationY').min(-0.03).max(0.03).step(0.001);\n\tgui.add(obj3d, 'rotationZ').min(-0.03).max(0.03).step(0.001);\n}\n\nexport default addDatGui;","import React, {useEffect, useRef} from 'react';\nimport * as THREE from \"three\";\nimport addCone from \"./addCone\";\nimport addLights from \"./addLights\";\nimport addDatGui from \"./addDatGui\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nconst objParameters = {\n\trotationX: 0,\n\trotationY: 0,\n\trotationZ: 0\n};\n\nfunction onWindowResize(camera, renderer) {\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nfunction Init () {\n\tconst mountRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tconst { current } = mountRef;\n\n\t\tif (!current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst width = window.innerWidth;\n\t\tconst height = window.innerHeight;\n\n\t\tconst renderer = new THREE.WebGLRenderer();\n\t\trenderer.setClearColor(0x000000);\n\t\trenderer.setSize(width, height);\n\n\t\t//document.body.appendChild( renderer.domElement );\n\t\t// use ref as a mount point of the Three.js scene instead of the document.body\n\t\tconst { domElement } = renderer;\n\t\tcurrent.appendChild(domElement);\n\n\t\tconst scene = new THREE.Scene();\n\t\tconst camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 5000);\n\t\tcamera.position.z = 1000;\n\n\t\taddLights(scene);\n\n\t\tconst mesh = addCone(100, 300,32);\n\t\tscene.add(mesh);\n\n\t\taddDatGui(objParameters);\n\n\t\tconst controls = new OrbitControls(camera, renderer.domElement);\n\t\t// controls.maxPolarAngle=Math.PI/2\n\n\t\twindow.addEventListener('resize',\n\t\t\t\tonWindowResize.bind(this, camera, renderer),\n\t\t\t\tfalse)\n\n\t\tconst animate = () => {\n\t\t\trequestAnimationFrame( animate );\n\t\t\tcontrols.update();\n\t\t\tmesh.rotation.x += objParameters.rotationX;\n\t\t\tmesh.rotation.y += objParameters.rotationY;\n\t\t\tmesh.rotation.z += objParameters.rotationZ;\n\t\t\trenderer.render( scene, camera );\n\t\t};\n\t\tanimate();\n\n\t\tconsole.log('mounted')\n\n\t\treturn () => { //componentWillUnmount\n\t\t\twindow.removeEventListener('resize', onWindowResize.bind(this, camera, renderer), false)\n\t\t\tcurrent.removeChild(domElement);\n\t\t\tconsole.log('unmounted')\n\t\t}\n\t}, []);\n\treturn <div ref={mountRef} />;\n}\n\nexport default Init;","import * as THREE from \"three\";\n\nexport default function addCone(radius,height,sides=12) {\n\tconst geometry = new THREE.ConeGeometry(radius, height, sides);\n\tconst material = new THREE.MeshPhongMaterial({\n\t\tcolor: 0x039BE5,\n\t\tspecular: 0xbcbcbc,\n\t});\n\treturn new THREE.Mesh(geometry, material);\n}","import React from 'react';\nimport './App.css';\nimport Init from \"./component-3d/Init\";\n\nfunction App() {\n\n\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Init/>\n\t\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}